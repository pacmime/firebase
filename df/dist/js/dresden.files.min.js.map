{"version":3,"sources":["dresden.files.js","common.js","app.js","home.module.js","home.component.js","char.module.js","char.component.js","consequences.component.js","powers.component.js","skills.component.js","stress.component.js"],"names":["_classCallCheck","instance","Constructor","TypeError","_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","protoProps","staticProps","prototype","angular","module","constant","factory","$firebaseObject","DataStoreUrl","getCharsForUser","uid","root","firebase","database","ref","child","orderByChild","equalTo","name","filter","value","encodeURIComponent","decodeURIComponent","provider","$windowProvider","Helper","$window","this","window","$get","getWidth","innerWidth","outerWidth","isXS","width","isSM","isMD","isLG","helper","directive","responsiveHelper","restrict","link","$scope","$element","$attrs","update","el","addClass","removeClass","resizeFn","w","element","on","$on","off","controller","$uibModalInstance","minimum","maximum","change","v","Math","min","max","ok","close","cancel","dismiss","$uibModal","scope","onSave","require","replace","template","ngModelController","$render","display","$viewValue","openKeypad","$modelValue","modalInstance","open","templateUrl","animation","resolve","result","then","$setViewValue","$timeout","label","join","newValue","trim","find","text","val","edit","editing","focus","select","done","onKeyUp","$event","code","undefined","which","error","base64","file","callback","readerOnload","e","btoa","coolFile","reader","FileReader","onload","files","size","alert","filetype","type","filename","readAsBinaryString","imgData","image","html","onFileSelect","console","log","data","$apply","$setDirty","reset","isDirty","$dirty","save","$setPristine","filePicker","trigger","Auth","login","$signInWithEmailAndPassword","email","password","authData","catch","errorMessage","message","component","$firebaseAuth","_this","$onInit","auth","$onAuthStateChanged","user","$onDestroy","doLogout","$signOut","doLogin","self","doReset","$sendPasswordResetEmail","fatePoints","powerLevel","skillCap","baseRefresh","adjustedRefresh","aspects","highConcept","trouble","other","stress","physical","0","1","2","mental","social","armor","consequences","skills","total","spent","superb","choices","great","good","fair","average","powers","phases","background","events","aspect","conflict","story","title","guest","guest1","guest2","notes","config","$locationProvider","$urlRouterProvider","otherwise","show","selector","btn","$","$btn","siblings","$stateProvider","state","url","HomeController","DataStore","store","_this2","displayOpts","loading","loadback","updateList","errback","$loaded","$destroy","id","chars","forEach","userId","push","prompt","json","getCharacterShell","$save","location","Feet in the Water","Waist Deep","Other","CharController","CharacterRef","PowerLevels","Templates","$stateParams","charId","levels","templates","timeout","_this3","refresh","character","cost","power","level","_this4","debounce","showSave","ConsequencesController","ngModel","sort","a","b","consq","onChange","newConsequence","modifier","showConsequenceEditor","hideConquenceEditor","mod","bindings","PowersController","newPower","misc","showEditor","hideEditor","SkillsController","group","split","getSkillSlots","StressController","_this5","threshold","used","index"],"mappings":"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","file":"dresden.files.min.js","sourcesContent":["'use strict';\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n(function (angular) {\n    \"use strict\";\n\n    angular.module('dresden.common', []).constant('DataStoreUrl', \"https://intense-fire-8692.firebaseio.com/DresdenFiles\").factory(\"DataStore\", [\"$firebaseObject\", 'DataStoreUrl', function ($firebaseObject, DataStoreUrl) {\n        return {\n            getCharsForUser: function getCharsForUser(uid) {\n                var root = firebase.database().ref();\n                var ref = root.child('DresdenFiles').child('chars');\n                ref.orderByChild('uid').equalTo(uid);\n                return $firebaseObject(ref);\n            }\n        };\n    }]).factory(\"CharacterRef\", [\"$firebaseObject\", 'DataStoreUrl', function ($firebaseObject, DataStoreUrl) {\n        return function (name) {\n            var root = firebase.database().ref();\n            var ref = root.child('DresdenFiles').child('chars').child(name);\n            return $firebaseObject(ref);\n        };\n    }]).filter('encode', function () {\n        return function (value) {\n            return encodeURIComponent(value);\n        };\n    }).filter('decode', function () {\n        return function (value) {\n            return decodeURIComponent(value);\n        };\n    }).provider('responsiveHelper', [\"$windowProvider\", function ($windowProvider) {\n\n        var $window = $windowProvider.$get();\n\n        function Helper($window) {\n            this.window = $window;\n        }\n        Helper.prototype = {\n            getWidth: function getWidth() {\n                return $window.innerWidth || $window.outerWidth;\n            },\n            isXS: function isXS() {\n                var width = this.getWidth();return width < 768;\n            },\n            isSM: function isSM() {\n                var width = this.getWidth();return width >= 768 && width < 992;\n            },\n            isMD: function isMD() {\n                var width = this.getWidth();return width >= 992 && width < 1200;\n            },\n            isLG: function isLG() {\n                var width = this.getWidth();return width >= 1200;\n            }\n        };\n\n        var helper = new Helper($window);\n\n        this.$get = function () {\n            return helper;\n        };\n    }])\n\n    //directive which appends appropriate responsive breakpoint classNames to the element\n    // on which it's set\n    .directive('responsive', ['$window', 'responsiveHelper', function ($window, responsiveHelper) {\n\n        return {\n            restrict: \"A\",\n            link: function link($scope, $element, $attrs) {\n\n                function update(el, helper) {\n                    if (helper.isXS()) el.addClass('responsive-xs');else el.removeClass('responsive-xs');\n\n                    if (helper.isSM()) el.addClass('responsive-sm');else el.removeClass('responsive-sm');\n\n                    if (helper.isMD()) el.addClass('responsive-md');else el.removeClass('responsive-md');\n\n                    if (helper.isLG()) el.addClass('responsive-lg');else el.removeClass('responsive-lg');\n                }\n\n                update($element, responsiveHelper);\n\n                var resizeFn = function resizeFn() {\n                    update($element, responsiveHelper);\n                };\n\n                var w = angular.element($window);\n                var listener = w.on('resize', resizeFn);\n\n                $scope.$on('$destroy', function () {\n                    w.off('resize', resizeFn);\n                });\n            }\n        };\n    }]).controller('KeyPad', function ($scope, $uibModalInstance, value, minimum, maximum) {\n\n        $scope.value = value;\n        $scope.minimum = minimum * 1 || 0;\n        $scope.maximum = maximum * 1 || 9999;\n\n        $scope.change = function (v) {\n            if (v > 0) $scope.value = Math.min($scope.value + v, maximum);else $scope.value = Math.max($scope.value + v, minimum);\n        };\n\n        $scope.ok = function () {\n            $uibModalInstance.close($scope.value);\n        };\n\n        $scope.cancel = function () {\n            $uibModalInstance.dismiss('cancel');\n        };\n    }).directive('editableStatValue', ['$uibModal', function ($uibModal) {\n        return {\n            scope: {\n                onSave: '&',\n                minimum: '@',\n                maximum: '@'\n            },\n            restrict: 'A',\n            require: 'ngModel',\n            replace: true,\n            template: '<div class=\"value\" ng-click=\"openKeypad()\">{{display}}</div>',\n            link: function link($scope, $element, $attrs, ngModelController) {\n\n                $scope.minimum = ($scope.minimum || 0) * 1;\n                $scope.maximum = ($scope.maximum || 9999) * 1;\n\n                ngModelController.$render = function () {\n                    $scope.display = ngModelController.$viewValue;\n                };\n\n                $scope.openKeypad = function () {\n\n                    var _value = ngModelController.$modelValue || 0;\n\n                    var modalInstance = $uibModal.open({\n                        templateUrl: 'src/keypad.html',\n                        controller: 'KeyPad',\n                        animation: false,\n                        resolve: {\n                            value: function value() {\n                                return _value;\n                            },\n                            minimum: function minimum() {\n                                return $scope.minimum;\n                            },\n                            maximum: function maximum() {\n                                return $scope.maximum;\n                            }\n                        }\n                    });\n\n                    modalInstance.result.then(function (value) {\n\n                        ngModelController.$setViewValue(value);\n                        ngModelController.$render();\n                        if ($scope.onSave) $scope.onSave();\n                    }, function () {});\n                };\n            }\n        };\n    }]).directive('editableInput', ['$timeout', function ($timeout) {\n\n        return {\n            restrict: 'AE',\n            require: 'ngModel',\n            scope: {\n                label: \"@\",\n                onSave: \"&\"\n            },\n            replace: true,\n            template: ['<div class=\"editable-input\">', '  <label class=\"editable-input-label\">{{::label}}</label>', '  <span class=\"editable-input-display\" ng-show=\"!editing\" ng-click=\"edit()\"></span>', '    <form class=\"form\" ng-show=\"editing\">', '      <div class=\"form-group\">', '        <div class=\"grid\">', '          <div class=\"grid__col-auto grid__col--grow-2\">', '            <input type=\"text\" class=\"form-control editable-input-field\" ', '              ng-keyup=\"onKeyUp($event, $event.keyCode)\"></input>', '          </div>', '          <div class=\"grid__col-auto\">', '            <div class=\"editable-input-buttons\">', '              <button type=\"button\" class=\"btn btn-xs btn-link text-success\" ng-disabled=\"error\" ng-click=\"done()\" tabindex=\"0\">', '                <span class=\"glyphicon glyphicon-ok\"></span>', '              </button>', '              <button type=\"button\" class=\"btn btn-xs btn-link text-danger\" ng-click=\"cancel()\"  tabindex=\"0\">', '                <span class=\"glyphicon glyphicon-remove\"></span>', '              </button>', '            </div>', '          </div>', '        </div>', '      </div>', '    </form>', '</div>'].join(' '),\n\n            link: function link($scope, $element, $attrs, ngModelController) {\n\n                function update(newValue) {\n                    // call $parsers pipeline then update $modelValue\n                    ngModelController.$setViewValue(newValue);\n                    // update the local view\n                    ngModelController.$render();\n                }\n\n                // when model change, update our view (just update the div content)\n                ngModelController.$render = function () {\n\n                    var value = ngModelController.$viewValue;\n                    var display = !value || !value.length || !value.trim().length ? \"Please enter a value\" : value;\n                    $element.find('.editable-input-display').text(display);\n                    $element.find('.editable-input-field').val(value);\n                };\n\n                /* ------------- private methods --------------- */\n\n                $scope.edit = function () {\n                    $scope.editing = true;\n                    $timeout(function () {\n                        $element.find('.editable-input-field').focus().select();\n                    }, 200);\n                };\n                $scope.done = function () {\n                    //update display with new value\n                    var value = $element.find('.editable-input-field').val();\n                    update(value);\n                    $scope.editing = false;\n                    $scope.onSave();\n                };\n                $scope.cancel = function () {\n                    //reset input\n                    $element.find('.editable-input-field').val(ngModelController.$viewValue);\n                    $scope.editing = false;\n                };\n\n                $scope.onKeyUp = function ($event, code) {\n                    // console.log(\"Up \" + code);\n                    if ((code === undefined || code === 0) && $event.which !== undefined) code = $event.which;\n                    if (code === 13 && !$scope.error) $scope.done(); //enter\n                    else if (code === 27) $scope.cancel(); //esc\n                };\n            }\n        };\n    }]).directive('imgSelector', function () {\n\n        function base64(file, callback) {\n            var coolFile = {};\n            function readerOnload(e) {\n                var base64 = btoa(e.target.result);\n                coolFile.base64 = base64;\n                callback(coolFile);\n            };\n\n            var reader = new FileReader();\n            reader.onload = readerOnload;\n\n            var file = file[0].files[0];\n            if (file.size > 100000) {\n                alert(\"Image is too large, should be less than 100 KB\");\n                callback(null);\n                return;\n            }\n\n            coolFile.filetype = file.type;\n            coolFile.size = file.size;\n            coolFile.filename = file.name;\n            reader.readAsBinaryString(file);\n        }\n\n        return {\n            scope: {\n                onSave: '&'\n            },\n            require: 'ngModel',\n            template: ['<form class=\"img-selector\">', '  <div class=\"image\" title=\"click to change\">', '    <img src=\"assets/avatar.png\">', '  </div>', '  <button type=\"button\" class=\"btn btn-sm btn-success\" ', '    ng-if=\"imgData && isDirty()\" ng-click=\"save()\">save</button>', '  <input type=\"file\" class=\"hidden\">', '</form>'].join(' '),\n\n            link: function link($scope, $element, $attrs, ngModelController) {\n\n                $scope.isDirty = function () {\n                    return ngModelController.$dirty;\n                };\n\n                function update() {\n                    if (!$scope.imgData) {\n                        return;\n                    }\n                    var image = '<img alt=\"avatar\" src=\"' + $scope.imgData + '\">';\n                    $element.find('.image').html(image);\n                }\n\n                $scope.save = function () {\n                    ngModelController.$setViewValue($scope.imgData);\n                    ngModelController.$setPristine();\n                    $scope.onSave();\n                };\n\n                function onFileSelect() {\n\n                    console.log(\"selecting file\");\n                    base64($element.find('input'), function (data) {\n\n                        if (!data) {\n                            $element.find('form')[0].reset();\n                            return;\n                        }\n\n                        $scope.$apply(function () {\n                            $scope.imgData = 'data:' + data.filetype + ';base64,' + data.base64;\n                            update();\n                            ngModelController.$setDirty();\n                        });\n                    });\n                }\n\n                var filePicker = $element.find('input');\n                $element.find('.image').on('click', function () {\n                    filePicker.trigger('click');\n                });\n                filePicker.on('change', onFileSelect);\n\n                ngModelController.$render = function () {\n                    if (!$scope.imgData) {\n                        $scope.imgData = ngModelController.$viewValue;\n                        update();\n                    }\n                };\n            }\n        };\n    }).controller('LoginController', function ($scope, $uibModalInstance, Auth) {\n\n        $scope.login = function () {\n\n            Auth.$signInWithEmailAndPassword($scope.email, $scope.password).then(function (authData) {\n                // console.log(\"Logged in\");\n                $uibModalInstance.close();\n            }).catch(function (error) {\n                var errorCode = error.code;\n                var errorMessage = error.message;\n                console.log(\"unable to login: \" + errorMessage);\n            });\n        };\n\n        $scope.cancel = function () {\n            $uibModalInstance.dismiss('cancel');\n        };\n    }).component('login', {\n\n        template: ['<a ng-if=\"!$ctrl.user\" ng-click=\"$ctrl.doLogin()\">Login</a>', '<a ng-if=\"$ctrl.user\" class=\"dropdown-toggle\" data-toggle=\"dropdown\" ', '  role=\"button\" aria-haspopup=\"true\" aria-expanded=\"false\">', '  <span class=\"hidden-xs\">{{$ctrl.user.email}}</span> ', '  <span class=\"visible-xs-inline-block glyphicon glyphicon-user\"></span>', '  <span class=\"caret\"></span>', '</a>', '<ul ng-if=\"$ctrl.user\" class=\"dropdown-menu\">', '  <li><a ng-click=\"$ctrl.doReset()\">Reset Password</a></li>', '  <li><a ng-click=\"$ctrl.doLogout()\">Log out</a></li>', '</ul>', '</div>'].join(' '),\n\n        controller: function controller($uibModal, $firebaseAuth) {\n            var _this = this;\n\n            this.$onInit = function () {\n                _this.auth = $firebaseAuth();\n                _this.auth.$onAuthStateChanged(function (authData) {\n                    return _this.user = authData;\n                });\n            };\n\n            this.$onDestroy = function () {\n                _this.auth = null;\n            };\n\n            this.doLogout = function () {\n                _this.auth.$signOut(); //v2.x.x\n                _this.user = null;\n            };\n\n            this.doLogin = function () {\n\n                var self = _this;\n                var modalInstance = $uibModal.open({\n                    templateUrl: 'login.html',\n                    controller: 'LoginController',\n                    resolve: {\n                        Auth: function Auth() {\n                            return self.auth;\n                        }\n                    }\n                });\n\n                modalInstance.result.then(function () {}, function () {});\n            };\n\n            this.doReset = function () {\n\n                //v2.x.x\n                auth.$sendPasswordResetEmail(_this.user.email, function (error) {\n                    if (error === null) {\n                        alert(\"Password reset email sent\");\n                    } else {\n                        alert(\"Error sending password reset email:\", error);\n                    }\n                });\n            };\n        }\n\n    }).constant('Templates', ['Pure Mortal', 'Champion of God', 'Changeling', 'Emissary of Power', 'Focused Practitioner', 'Knights of a Faerie Court', 'Lycanthrope', 'Minor Talent', 'Red Court Infected', 'Sorcerer', 'True Believer', 'Were-Form', 'White Court Vampire', 'White Court Virgin', 'Wizard']).constant(\"CharacterShell\", {\n\n        name: \"\",\n        template: \"\",\n        fatePoints: 0,\n\n        powerLevel: \"\",\n        skillCap: 0,\n        baseRefresh: 0,\n\n        adjustedRefresh: 0,\n        aspects: {\n            highConcept: \"\",\n            trouble: \"\",\n            other: \"\"\n        },\n\n        stress: {\n            physical: {\n                0: false,\n                1: false,\n                2: false\n            },\n            mental: {\n                0: false,\n                1: false,\n                2: false\n            },\n            social: {\n                0: false,\n                1: false,\n                2: false\n            },\n            armor: {\n                /*\n                modifier: 2,\n                description: \"\"\n                */\n            }\n        },\n        consequences: {\n            /*\n            \"aspect\": { \n                type: \"mild | moderate | severe | extreme\",\n                modifier: 2 | 4 | 6 | 8,\n                stress: \"any | physical | mental | social\"\n            }\n            */\n        },\n        skills: {\n            total: 0,\n            spent: 0,\n            superb: { choices: \"\" },\n            great: { choices: \"\" },\n            good: { choices: \"\" },\n            fair: { choices: \"\" },\n            average: { choices: \"\" }\n        },\n\n        powers: {\n            /*\n            \"ability\": {\n                cost: \"number\",\n                misc: \"string\"\n            }\n            */\n        },\n\n        phases: {\n            background: {\n                events: \"\",\n                aspect: \"\"\n            },\n            conflict: {\n                events: \"\",\n                aspect: \"\"\n            },\n            story: {\n                events: \"\",\n                aspect: \"\",\n                title: \"\",\n                guest: \"\"\n            },\n            guest1: {\n                events: \"\",\n                aspect: \"\",\n                title: \"\",\n                guest: \"\"\n            },\n            guest2: {\n                events: \"\",\n                aspect: \"\",\n                title: \"\",\n                guest: \"\"\n            }\n        },\n\n        notes: \"\"\n\n    });\n})(angular);\n\n(function (angular) {\n\n    \"use strict\";\n\n    angular.module('dresden', [\"firebase\", 'ui.router', 'ui.bootstrap', 'ngAnimate', 'dresden.common', 'dresden.home', 'dresden.char'])\n\n    /**\n     *\n     */\n    .config(function myAppConfig($locationProvider, $urlRouterProvider) {\n        $urlRouterProvider.otherwise('/');\n        // $locationProvider.html5Mode(true);\n    });\n\n    window.show = function (selector, btn) {\n        $('.c-card').removeClass('is-shown');\n        $(selector).addClass('is-shown');\n        var $btn = $(btn);\n        $btn.addClass('active');\n        $btn.siblings().removeClass('active');\n    };\n})(angular);\n\n(function (angular) {\n\n    \"use strict\";\n\n    angular.module(\"dresden.home\", [\"firebase\", 'dresden.common']).config(function myAppConfig($stateProvider) {\n        $stateProvider.state({\n            name: 'home',\n            url: '/',\n            template: '<home></home>'\n        });\n    });\n})(angular);\n(function (angular) {\n\n    \"use strict\";\n\n    var HomeController = function () {\n        function HomeController(DataStore, $firebaseAuth, $timeout) {\n            'ngInject';\n\n            _classCallCheck(this, HomeController);\n\n            this.store = DataStore;\n            this.auth = $firebaseAuth();\n        }\n\n        _createClass(HomeController, [{\n            key: '$onInit',\n            value: function $onInit() {\n                var _this2 = this;\n\n                this.displayOpts = {\n                    loading: false,\n                    message: null,\n                    error: null\n                };\n\n                var loadback = function loadback() {\n                    _this2.updateList();\n                    _this2.displayOpts.loading = false;\n                };\n                var errback = function errback(error) {\n                    return _this2.displayOpts.error = \"Failed to load saved data: \" + error.data;\n                };\n\n                var callback = function callback(authData) {\n                    _this2.user = authData;\n\n                    if (authData && authData.uid) {\n                        _this2.displayOpts.loading = true;\n                        _this2.data = _this2.store.getCharsForUser(authData.uid);\n                        _this2.data.$loaded().then(loadback).catch(errback);\n                    } else if (_this2.data) {\n                        _this2.data.$destroy();\n                    }\n                };\n\n                this.auth.$onAuthStateChanged(callback);\n            }\n        }, {\n            key: 'updateList',\n            value: function updateList() {\n                if (!this.user) return;\n\n                var id = this.user.uid;\n                var chars = [];\n\n                angular.forEach(this.data, function (value, key) {\n                    if (value.userId && value.userId === id) chars.push(key);\n                });\n                this.chars = chars;\n            }\n        }, {\n            key: 'createCharacter',\n            value: function createCharacter() {\n\n                var name = prompt(\"Name the character\", \"Joe Bob\");\n                if (!name) {\n                    alert(\"Characters must have a name\");\n                    return;\n                } else if (this.data[name]) {\n                    alert(\"Name is already in use\");\n                    return;\n                }\n\n                var json = getCharacterShell();\n\n                //associate user id for restricting who can edit\n                json.userId = $scope.user.uid;\n\n                this.data[name] = json;\n                this.data.$save().then(function () {\n                    //navigate to the new char page\n                    window.location = '#/' + encodeURIComponent(name);\n                }).catch(function (error) {\n                    alert(\"Unable to create character because of an error\");\n                });\n            }\n        }]);\n\n        return HomeController;\n    }();\n\n    var app = angular.module(\"dresden.home\").component(\"home\", {\n        templateUrl: 'home/home.component.html',\n        controller: HomeController\n    });\n})(angular);\n(function (angular) {\n\n    \"use strict\";\n\n    angular.module(\"dresden.char\", [\"firebase\"]).config(function myAppConfig($stateProvider) {\n        $stateProvider.state({\n            name: 'char',\n            url: '/chars/:id',\n            template: '<character></character>'\n        });\n    }).constant('PowerLevels', {\n        \"Feet in the Water\": {\n            skillCap: 4,\n            baseRefresh: 6\n        },\n        \"Waist Deep\": {\n            skillCap: 4,\n            baseRefresh: 8\n        },\n        \"Other\": {\n            skillCap: 5,\n            baseRefresh: 10\n        }\n    });\n})(angular);\n(function (angular) {\n\n    \"use strict\";\n\n    var CharController = function () {\n        function CharController(CharacterRef, PowerLevels, Templates, $firebaseAuth, $timeout, $stateParams) {\n            'ngInject';\n\n            _classCallCheck(this, CharController);\n\n            this.charId = $stateParams.id;\n            this.store = CharacterRef;\n            this.auth = $firebaseAuth();\n            this.levels = PowerLevels;\n            this.templates = Templates;\n            this.timeout = $timeout;\n        }\n\n        _createClass(CharController, [{\n            key: '$onInit',\n            value: function $onInit() {\n                var _this3 = this;\n\n                this.displayOpts = {\n                    loading: false,\n                    message: null,\n                    error: null\n                };\n\n                var loadback = function loadback() {\n                    _this3.displayOpts.loading = false;\n                    _this3.refresh();\n                };\n                var errback = function errback(error) {\n                    return _this3.displayOpts.error = \"Failed to load character: \" + error.data;\n                };\n\n                var callback = function callback(authData) {\n                    _this3.user = authData;\n\n                    if (authData && authData.uid) {\n                        _this3.displayOpts.loading = true;\n                        _this3.character = _this3.store(_this3.charId);\n                        _this3.character.$loaded().then(loadback).catch(errback);\n                    } else if (_this3.character) {\n                        _this3.character.$destroy();\n                    }\n                };\n\n                this.auth.$onAuthStateChanged(callback);\n            }\n        }, {\n            key: '$onDestroy',\n            value: function $onDestroy() {\n                this.charId = null;\n                this.store = null;\n                this.auth = null;\n                this.levels = null;\n                this.templates = null;\n                this.timeout = null;\n            }\n        }, {\n            key: 'refresh',\n            value: function refresh() {\n                var cost = 0;\n                angular.forEach(this.character.powers, function (power) {\n                    cost += power.cost; //NOTE: costs are negative\n                });\n                this.adjustedRefresh = this.character.baseRefresh + cost;\n            }\n        }, {\n            key: 'onPowerLevelChange',\n            value: function onPowerLevelChange() {\n                var level = this.levels[this.character.powerLevel];\n                this.character.skillCap = level.skillCap;\n                this.character.baseRefresh = level.baseRefresh;\n                this.refresh();\n                this.save();\n            }\n        }, {\n            key: 'save',\n            value: function save() {\n                var _this4 = this;\n\n                if (this.debounce) {\n                    this.timeout.cancel(this.debounce);\n                    this.debounce = null;\n                }\n\n                this.debounce = this.timeout(function () {\n\n                    _this4.debounce = null;\n\n                    _this4.character.$save().then(function () {\n                        _this4.displayOpts.showSave = true;\n                        _this4.timeout(function () {\n                            _this4.displayOpts.showSave = false;\n                        }, 1500);\n                    }, function (error) {\n                        alert(\"There was an error\");\n                    });\n                }, 250);\n            }\n        }]);\n\n        return CharController;\n    }();\n\n    var app = angular.module(\"dresden.char\").component(\"character\", {\n        templateUrl: 'char/char.component.html',\n        controller: CharController\n    });\n})(angular);\n(function (angular) {\n\n    \"use strict\";\n\n    var ConsequencesController = function () {\n        function ConsequencesController() {\n            _classCallCheck(this, ConsequencesController);\n        }\n\n        _createClass(ConsequencesController, [{\n            key: '$onInit',\n            value: function $onInit() {\n                this.displayOpts = {};\n            }\n        }, {\n            key: 'getConsequences',\n            value: function getConsequences() {\n                var result = [];\n                if (this.ngModel) {\n                    for (var aspect in this.ngModel) {\n                        result.push(this.ngModel[aspect]);\n                    }\n                }\n                return result.sort(function (a, b) {\n                    if (a.type === b.type) return a.aspect < b.aspect;else if (a.type === 'mild') return -1;else if (b.type === 'mild') return 1;else if (a.type === 'moderate') return -1;else if (b.type === 'moderate') return 1;else if (a.type === 'severe') return -1;else if (b.type === 'severe') return 1;\n                    return 0;\n                });\n            }\n        }, {\n            key: 'removeConsequence',\n            value: function removeConsequence(consq) {\n                if (consq) {\n                    this.ngModel[consq.aspect] = null;\n                    this.onChange();\n                }\n            }\n        }, {\n            key: 'showConsequenceEditor',\n            value: function showConsequenceEditor() {\n                this.newConsequence = {\n                    aspect: \"\",\n                    type: \"mild\",\n                    modifier: -2\n                };\n                this.displayOpts.showConsequenceEditor = true;\n            }\n        }, {\n            key: 'addConsequence',\n            value: function addConsequence() {\n                this.ngModel = this.ngModel || {};\n                this.ngModel[this.newConsequence.aspect] = this.newConsequence;\n                this.onChange();\n                this.hideConquenceEditor();\n            }\n        }, {\n            key: 'hideConquenceEditor',\n            value: function hideConquenceEditor() {\n                this.newConsequence = null;\n                this.displayOpts.showConsequenceEditor = false;\n            }\n        }, {\n            key: 'updateNewConsequenceModifier',\n            value: function updateNewConsequenceModifier() {\n                var type = this.newConsequence.type;\n                var mod = 'mild' === type ? -2 : 'moderate' === type ? -4 : 'severe' === type ? -6 : -8;\n                this.newConsequence.modifier = mod;\n            }\n        }]);\n\n        return ConsequencesController;\n    }();\n\n    var app = angular.module(\"dresden.char\").component(\"consequences\", {\n        bindings: {\n            ngModel: \"=\",\n            onChange: \"&\"\n        },\n        templateUrl: 'char/consequences.component.html',\n        controller: ConsequencesController\n    });\n})(angular);\n(function (angular) {\n\n    \"use strict\";\n\n    var PowersController = function () {\n        function PowersController() {\n            _classCallCheck(this, PowersController);\n        }\n\n        _createClass(PowersController, [{\n            key: '$onInit',\n            value: function $onInit() {\n                this.displayOpts = {};\n            }\n        }, {\n            key: 'removePower',\n            value: function removePower(name) {\n                this.ngModel[name] = null;\n                this.onChange();\n            }\n        }, {\n            key: 'showEditor',\n            value: function showEditor() {\n                this.newPower = {\n                    name: \"\",\n                    cost: 0,\n                    misc: \"\"\n                };\n                this.displayOpts.showEditor = true;\n            }\n        }, {\n            key: 'addPower',\n            value: function addPower() {\n                this.ngModel = this.ngModel || {};\n                this.ngModel[this.newPower.name] = this.newPower;\n                this.onChange();\n                this.hideEditor();\n            }\n        }, {\n            key: 'hideEditor',\n            value: function hideEditor() {\n                this.newPower = null;\n                this.displayOpts.showEditor = false;\n            }\n        }]);\n\n        return PowersController;\n    }();\n\n    angular.module(\"dresden.char\").component(\"powers\", {\n        bindings: {\n            ngModel: \"=\",\n            onChange: \"&\"\n        },\n        templateUrl: 'char/powers.component.html',\n        controller: PowersController\n    });\n})(angular);\n(function (angular) {\n\n    \"use strict\";\n\n    var SkillsController = function () {\n        function SkillsController() {\n            _classCallCheck(this, SkillsController);\n        }\n\n        _createClass(SkillsController, [{\n            key: '$onInit',\n            value: function $onInit() {}\n        }, {\n            key: 'getSkillSlots',\n            value: function getSkillSlots(group) {\n                if (!this.ngModel || !this.ngModel[group]) return 0;\n                var skills = this.ngModel[group].choices;\n                if (!skills || !skills.length) return 0;\n                return skills.split(',').length;\n            }\n\n            /**\n             * @return true if not valid!\n             */\n\n        }, {\n            key: 'validateSpent',\n            value: function validateSpent() {\n                if (!this.ngModel) return false;\n                var spent = this.getSkillSlots('average') + this.getSkillSlots('fair') + this.getSkillSlots('good') + this.getSkillSlots('great') + this.getSkillSlots('superb');\n                return spent > this.ngModel.total;\n            }\n\n            /**\n             * @return true if not valid!\n             */\n\n        }, {\n            key: 'validate',\n            value: function validate(group) {\n                if (!this.ngModel) return false;\n\n                switch (group) {\n                    case 'superb':\n                        return this.getSkillSlots('superb') > this.getSkillSlots('great');\n                    case 'great':\n                        return this.getSkillSlots('great') > this.getSkillSlots('good');\n                    case 'good':\n                        return this.getSkillSlots('good') > this.getSkillSlots('fair');\n                    case 'fair':\n                        return this.getSkillSlots('fair') > this.getSkillSlots('average');\n                }\n                return false; //valid\n            }\n        }]);\n\n        return SkillsController;\n    }();\n\n    angular.module(\"dresden.char\").component(\"skills\", {\n        bindings: {\n            ngModel: \"=\",\n            onChange: \"&\"\n        },\n        templateUrl: 'char/skills.component.html',\n        controller: SkillsController\n    });\n})(angular);\n(function (angular) {\n\n    \"use strict\";\n\n    var StressController = function () {\n        function StressController() {\n            _classCallCheck(this, StressController);\n        }\n\n        _createClass(StressController, [{\n            key: '$onInit',\n            value: function $onInit() {}\n        }, {\n            key: 'resetStress',\n            value: function resetStress() {\n                var _this5 = this;\n\n                angular.forEach(['physical', 'mental', 'social', 'hunger'], function (type) {\n                    var max = _this5.ngModel[type].threshold;\n                    var used = _this5.ngModel[type].used;\n                    for (var index = 0; index < max; ++index) {\n                        used[index] = false;\n                    }\n                });\n                this.onChange();\n            }\n        }, {\n            key: 'toggleStress',\n            value: function toggleStress(type, index) {\n                this.ngModel[type].used[index] = !this.ngModel[type].used[index];\n                this.onChange();\n            }\n        }]);\n\n        return StressController;\n    }();\n\n    angular.module(\"dresden.char\").component(\"stress\", {\n        bindings: {\n            ngModel: \"=\",\n            onChange: \"&\"\n        },\n        templateUrl: 'char/stress.component.html',\n        controller: StressController\n    });\n})(angular);","(function(angular) {\n    \"use strict\";\n\n    angular.module('dresden.common', [])\n\n    .constant('DataStoreUrl', \"https://intense-fire-8692.firebaseio.com/DresdenFiles\")\n\n    .factory(\"DataStore\", [\"$firebaseObject\", 'DataStoreUrl',\n        function($firebaseObject, DataStoreUrl) {\n            return {\n                getCharsForUser: function(uid) {\n                    var root = firebase.database().ref();\n                    var ref = root.child('DresdenFiles').child('chars');\n                    ref.orderByChild('uid').equalTo(uid);\n                    return $firebaseObject(ref);\n                }\n            }\n        }\n    ])\n\n    .factory(\"CharacterRef\", [\"$firebaseObject\", 'DataStoreUrl',\n        function($firebaseObject, DataStoreUrl) {\n            return function(name) {\n                var root = firebase.database().ref();\n                var ref = root.child('DresdenFiles').child('chars').child(name);\n                return $firebaseObject(ref);\n            }\n        }\n    ])\n\n\n\n\n    .filter('encode', function() {\n        return function(value) {\n            return encodeURIComponent(value);\n        };\n    })\n\n    .filter('decode', function() {\n        return function(value) {\n            return decodeURIComponent(value);\n        };\n    })\n\n    .provider('responsiveHelper', [\"$windowProvider\", function ($windowProvider) {\n        \n        var $window  = $windowProvider.$get();\n\n        function Helper($window) {\n            this.window = $window;\n        }\n        Helper.prototype = {\n            getWidth: function() { return $window.innerWidth || $window.outerWidth; },\n            isXS: function () { var width = this.getWidth(); return width < 768; },\n            isSM: function () { var width = this.getWidth(); return width >= 768 && width < 992; },\n            isMD: function () { var width = this.getWidth(); return width >= 992 && width < 1200; },\n            isLG: function () { var width = this.getWidth(); return width >= 1200; }\n        };\n\n        var helper = new Helper($window);\n\n        this.$get = function() {\n            return helper;\n        };\n    }])\n\n    //directive which appends appropriate responsive breakpoint classNames to the element\n    // on which it's set\n    .directive('responsive', ['$window', 'responsiveHelper', function($window, responsiveHelper) {\n\n        return {\n            restrict: \"A\",\n            link: function($scope, $element, $attrs) {\n\n                function update(el, helper) {\n                    if(helper.isXS())\n                        el.addClass('responsive-xs');\n                    else\n                        el.removeClass('responsive-xs');\n\n                    if(helper.isSM())\n                        el.addClass('responsive-sm');\n                    else \n                        el.removeClass('responsive-sm');\n\n                    if(helper.isMD())\n                        el.addClass('responsive-md');\n                    else \n                        el.removeClass('responsive-md');\n\n                    if(helper.isLG())\n                        el.addClass('responsive-lg');\n                    else \n                        el.removeClass('responsive-lg');\n                }\n\n                update($element, responsiveHelper);\n\n                var resizeFn = function() {\n                    update($element, responsiveHelper);\n                };\n\n                var w = angular.element($window);\n                var listener = w.on('resize', resizeFn);\n\n                $scope.$on('$destroy', function() {\n                    w.off('resize', resizeFn);\n                });\n\n            }\n        };\n\n    }])\n\n\n    \n\n    .controller('KeyPad', function ($scope, $uibModalInstance, value, minimum, maximum) {\n\n        $scope.value = value;\n        $scope.minimum = minimum*1 || 0;\n        $scope.maximum = maximum*1 || 9999;\n        \n        $scope.change = function(v) { \n            if(v>0)\n                $scope.value = Math.min($scope.value + v, maximum); \n            else\n                $scope.value = Math.max($scope.value + v, minimum); \n        }\n        \n        $scope.ok = function () {\n            $uibModalInstance.close($scope.value);\n        };\n\n        $scope.cancel = function () {\n            $uibModalInstance.dismiss('cancel');\n        };\n\n    })\n\n\n    .directive('editableStatValue', ['$uibModal', function($uibModal) {\n        return {\n            scope: {\n                onSave: '&',\n                minimum: '@',\n                maximum: '@'\n            },\n            restrict: 'A',\n            require: 'ngModel',\n            replace: true,\n            template: '<div class=\"value\" ng-click=\"openKeypad()\">{{display}}</div>',\n            link: function($scope, $element, $attrs, ngModelController) {\n\n                $scope.minimum = ($scope.minimum || 0)*1;\n                $scope.maximum = ($scope.maximum || 9999)*1;\n\n                ngModelController.$render = function() {\n                    $scope.display = ngModelController.$viewValue;\n                };\n\n                $scope.openKeypad = function() {\n\n                    var value = ngModelController.$modelValue || 0;\n\n                    var modalInstance = $uibModal.open({\n                        templateUrl: 'src/keypad.html',\n                        controller: 'KeyPad',\n                        animation: false,\n                        resolve: {\n                            value: function() { return value; },\n                            minimum: function() { return $scope.minimum; },\n                            maximum: function() { return $scope.maximum; }\n                        }\n                    });\n\n                    modalInstance.result.then(function(value) {\n                        \n                        ngModelController.$setViewValue(value);\n                        ngModelController.$render();\n                        if($scope.onSave)\n                            $scope.onSave();\n\n                    }, function () { });\n\n                };\n            }\n        };\n    }])\n\n\n\n    .directive('editableInput', ['$timeout', function($timeout) {\n\n        return {\n            restrict: 'AE',\n            require: 'ngModel',\n            scope: {\n                label: \"@\",\n                onSave: \"&\"\n            },\n            replace: true,\n            template: [\n                '<div class=\"editable-input\">',\n                '  <label class=\"editable-input-label\">{{::label}}</label>',\n                '  <span class=\"editable-input-display\" ng-show=\"!editing\" ng-click=\"edit()\"></span>',\n\n                '    <form class=\"form\" ng-show=\"editing\">',\n                '      <div class=\"form-group\">',\n                '        <div class=\"grid\">', \n                '          <div class=\"grid__col-auto grid__col--grow-2\">',   \n                '            <input type=\"text\" class=\"form-control editable-input-field\" ',\n                '              ng-keyup=\"onKeyUp($event, $event.keyCode)\"></input>',\n                '          </div>',\n                '          <div class=\"grid__col-auto\">',\n                '            <div class=\"editable-input-buttons\">',\n                '              <button type=\"button\" class=\"btn btn-xs btn-link text-success\" ng-disabled=\"error\" ng-click=\"done()\" tabindex=\"0\">',\n                '                <span class=\"glyphicon glyphicon-ok\"></span>',\n                '              </button>',\n                '              <button type=\"button\" class=\"btn btn-xs btn-link text-danger\" ng-click=\"cancel()\"  tabindex=\"0\">',\n                '                <span class=\"glyphicon glyphicon-remove\"></span>',\n                '              </button>',\n                '            </div>',\n                '          </div>',\n                '        </div>',\n                '      </div>',\n                '    </form>',\n                '</div>'\n            ].join(' '),\n\n            link: function($scope, $element, $attrs, ngModelController) {\n\n                function update(newValue) {\n                    // call $parsers pipeline then update $modelValue\n                    ngModelController.$setViewValue(newValue);\n                    // update the local view\n                    ngModelController.$render();\n                }\n\n                // when model change, update our view (just update the div content)\n                ngModelController.$render = function() {\n\n                    var value = ngModelController.$viewValue;\n                    var display = (!value || !value.length || !value.trim().length) ? \"Please enter a value\" : value;\n                    $element.find('.editable-input-display').text(display);\n                    $element.find('.editable-input-field').val(value);\n                };\n\n\n                /* ------------- private methods --------------- */\n\n                $scope.edit = function() {\n                    $scope.editing=true;\n                    $timeout(function() {\n                        $element.find('.editable-input-field').focus().select();\n                    }, 200);\n                };\n                $scope.done = function() {\n                    //update display with new value\n                    var value = $element.find('.editable-input-field').val();\n                    update(value);\n                    $scope.editing=false;\n                    $scope.onSave();\n                };\n                $scope.cancel = function() {\n                    //reset input\n                    $element.find('.editable-input-field').val(ngModelController.$viewValue);\n                    $scope.editing=false;\n                };\n                \n                $scope.onKeyUp = function($event, code) {\n                    // console.log(\"Up \" + code);\n                    if((code === undefined || code === 0) && $event.which !== undefined)\n                        code = $event.which;\n                    if(code === 13 && !$scope.error) $scope.done();  //enter\n                    else if(code === 27)             $scope.cancel();//esc\n                    \n                };\n\n            }\n        };\n\n    }])\n\n\n\n    .directive('imgSelector', function() {\n\n        function base64(file, callback){\n            var coolFile = {};\n            function readerOnload(e){\n                var base64 = btoa(e.target.result);\n                coolFile.base64 = base64;\n                callback(coolFile)\n            };\n\n            var reader = new FileReader();\n            reader.onload = readerOnload;\n\n            var file = file[0].files[0];\n            if(file.size > 100000) {\n                alert(\"Image is too large, should be less than 100 KB\");\n                callback(null);\n                return;\n            }\n\n            coolFile.filetype = file.type;\n            coolFile.size = file.size;\n            coolFile.filename = file.name;\n            reader.readAsBinaryString(file);\n        }\n\n        return {\n            scope: {\n                onSave: '&'\n            },\n            require: 'ngModel',\n            template: [\n                '<form class=\"img-selector\">',\n                '  <div class=\"image\" title=\"click to change\">',\n                '    <img src=\"assets/avatar.png\">',\n                '  </div>',\n                '  <button type=\"button\" class=\"btn btn-sm btn-success\" ',\n                '    ng-if=\"imgData && isDirty()\" ng-click=\"save()\">save</button>',\n                '  <input type=\"file\" class=\"hidden\">',\n                '</form>'\n            ].join(' '),\n\n            link: function($scope, $element, $attrs, ngModelController) {\n\n                $scope.isDirty = function() {\n                    return ngModelController.$dirty;\n                }\n\n                function update() {\n                    if(!$scope.imgData) {return;}\n                    var image = '<img alt=\"avatar\" src=\"' + $scope.imgData + '\">';\n                    $element.find('.image').html(image);\n                    \n                }\n\n                $scope.save = function() {\n                    ngModelController.$setViewValue($scope.imgData);\n                    ngModelController.$setPristine();\n                    $scope.onSave();\n                }\n                \n                function onFileSelect() {\n\n                    console.log(\"selecting file\");\n                    base64( $element.find('input'), function(data){\n\n                        if(!data) {\n                            $element.find('form')[0].reset();\n                            return;\n                        }\n\n                        $scope.$apply(function() {\n                            $scope.imgData = 'data:' + data.filetype + ';base64,' + data.base64;\n                            update();\n                            ngModelController.$setDirty();\n                        });\n                    });\n\n                }\n\n                var filePicker = $element.find('input');\n                $element.find('.image').on('click', function() {\n                    filePicker.trigger('click');\n                });\n                filePicker.on('change', onFileSelect);\n\n                ngModelController.$render = function() {\n                    if(!$scope.imgData) {\n                        $scope.imgData = ngModelController.$viewValue;\n                        update();\n                    }\n                };\n            }\n        };\n\n    })\n\n\n\n\n\n\n\n    .controller('LoginController', function($scope, $uibModalInstance, Auth) {\n\n        $scope.login = function() {\n            \n            Auth.$signInWithEmailAndPassword($scope.email, $scope.password)\n            .then(function(authData) {\n                // console.log(\"Logged in\");\n                $uibModalInstance.close();\n            })\n            .catch(function(error) {\n                var errorCode = error.code;\n                var errorMessage = error.message;\n                console.log(\"unable to login: \" + errorMessage);\n            });\n        };\n\n        $scope.cancel = function () {\n            $uibModalInstance.dismiss('cancel');\n        };\n\n    })\n\n\n\n    .component('login', {\n\n        template: [\n                '<a ng-if=\"!$ctrl.user\" ng-click=\"$ctrl.doLogin()\">Login</a>',\n                '<a ng-if=\"$ctrl.user\" class=\"dropdown-toggle\" data-toggle=\"dropdown\" ',\n                '  role=\"button\" aria-haspopup=\"true\" aria-expanded=\"false\">',\n                '  <span class=\"hidden-xs\">{{$ctrl.user.email}}</span> ',\n                '  <span class=\"visible-xs-inline-block glyphicon glyphicon-user\"></span>',\n                '  <span class=\"caret\"></span>',\n                '</a>',\n                '<ul ng-if=\"$ctrl.user\" class=\"dropdown-menu\">',\n                '  <li><a ng-click=\"$ctrl.doReset()\">Reset Password</a></li>',\n                '  <li><a ng-click=\"$ctrl.doLogout()\">Log out</a></li>',\n                '</ul>',\n                '</div>'\n            ].join(' '),\n\n        controller: function($uibModal, $firebaseAuth) {\n\n            this.$onInit = () => {\n                this.auth = $firebaseAuth();\n                this.auth.$onAuthStateChanged( (authData) => this.user = authData );\n            };\n\n            this.$onDestroy = () => {\n                this.auth = null;\n            };\n\n            this.doLogout = () => {\n                this.auth.$signOut();        //v2.x.x\n                this.user = null;\n            };\n\n            this.doLogin = () => {\n\n                var self = this;\n                var modalInstance = $uibModal.open({\n                    templateUrl: 'login.html',\n                    controller: 'LoginController',\n                    resolve: {\n                        Auth: function() { return self.auth; }\n                    }\n                });\n\n                modalInstance.result.then(function() {}, function () {});\n\n            };\n\n            this.doReset = () => {\n\n                //v2.x.x\n                auth.$sendPasswordResetEmail(this.user.email, function(error) {\n                    if (error === null) {\n                        alert(\"Password reset email sent\");\n                    } else {\n                        alert(\"Error sending password reset email:\", error);\n                    }\n                });\n\n            };\n\n        }\n\n    })\n\n\n    .constant('Templates', [\n        'Pure Mortal',\n        'Champion of God',\n        'Changeling',\n        'Emissary of Power',\n        'Focused Practitioner',\n        'Knights of a Faerie Court',\n        'Lycanthrope',\n        'Minor Talent',\n        'Red Court Infected',\n        'Sorcerer',\n        'True Believer',\n        'Were-Form',\n        'White Court Vampire',\n        'White Court Virgin',\n        'Wizard'\n    ])\n\n    .constant(\"CharacterShell\", {\n        \n        name: \"\",\n        template: \"\",\n        fatePoints: 0,\n        \n        powerLevel: \"\",\n        skillCap: 0,\n        baseRefresh: 0,\n        \n        adjustedRefresh: 0,\n        aspects: {\n            highConcept: \"\",\n            trouble: \"\",\n            other: \"\"\n        },\n\n        stress: {\n            physical: { \n                0: false,\n                1: false,\n                2: false\n            },\n            mental: { \n                0: false,\n                1: false,\n                2: false\n            },\n            social: { \n                0: false,\n                1: false,\n                2: false\n            },\n            armor: {\n                /*\n                modifier: 2,\n                description: \"\"\n                */\n            }\n        },\n        consequences: {\n            /*\n            \"aspect\": { \n                type: \"mild | moderate | severe | extreme\",\n                modifier: 2 | 4 | 6 | 8,\n                stress: \"any | physical | mental | social\"\n            }\n            */\n        },\n        skills: {\n            total: 0,\n            spent: 0,\n            superb: {choices: \"\"},\n            great: {choices:\"\"},\n            good: {choices:\"\"},\n            fair: {choices:\"\"},\n            average: {choices:\"\"}\n        },\n\n        powers: {\n            /*\n            \"ability\": {\n                cost: \"number\",\n                misc: \"string\"\n            }\n            */\n        },\n\n        phases: {\n            background: {\n                events: \"\",\n                aspect: \"\"\n            },\n            conflict: {\n                events: \"\",\n                aspect: \"\"\n            },\n            story: {\n                events: \"\",\n                aspect: \"\",\n                title: \"\",\n                guest: \"\"\n            },\n            guest1: {\n                events: \"\",\n                aspect: \"\",\n                title: \"\",\n                guest: \"\"\n            },\n            guest2: {\n                events: \"\",\n                aspect: \"\",\n                title: \"\",\n                guest: \"\"\n            }\n        },\n\n        notes: \"\"\n\n    })\n\n\n    ;\n\n}) (angular);\n\n","(function(angular) {\n    \n    \"use strict\";\n\n\n    angular.module('dresden', [\n        \"firebase\", 'ui.router', 'ui.bootstrap', 'ngAnimate', \n        'dresden.common', 'dresden.home', 'dresden.char'\n    ])\n\n    /**\n     *\n     */\n    .config(function myAppConfig ($locationProvider, $urlRouterProvider) {\n        $urlRouterProvider.otherwise('/');\n        // $locationProvider.html5Mode(true);\n    })\n\n    ;\n\n\n    window.show = function(selector, btn) {\n        $('.c-card').removeClass('is-shown');\n        $(selector).addClass('is-shown');\n        var $btn = $(btn);\n        $btn.addClass('active');\n        $btn.siblings().removeClass('active');\n    }\n\n})(angular);\n\n","(function(angular) {\n    \n    \"use strict\";\n\n\n    angular.module(\"dresden.home\", [\"firebase\", 'dresden.common']).config(function myAppConfig ( $stateProvider ) {\n        $stateProvider.state({\n            name: 'home',\n            url: '/',\n            template: '<home></home>'\n        });\n    });\n\n}) (angular);","(function(angular) {\n    \n    \"use strict\";\n\n\n\n    class HomeController {\n\n        constructor (DataStore, $firebaseAuth, $timeout) {\n            'ngInject';\n\n            this.store = DataStore;\n            this.auth = $firebaseAuth();\n\n        }\n\n        $onInit () {\n            this.displayOpts = {\n                loading: false,\n                message: null,\n                error: null\n            };\n\n            let loadback = () => {\n                this.updateList();\n                this.displayOpts.loading = false;\n            };\n            let errback = (error) => \n                this.displayOpts.error = \"Failed to load saved data: \" + error.data;\n\n            let callback = (authData) => {\n                this.user = authData;\n\n                if(authData && authData.uid) {\n                    this.displayOpts.loading = true;\n                    this.data = this.store.getCharsForUser(authData.uid);\n                    this.data.$loaded().then(loadback).catch(errback);\n                } else if(this.data) {\n                    this.data.$destroy();\n                }\n            };\n\n            this.auth.$onAuthStateChanged(callback);\n        }\n        \n\n        updateList () {\n            if(!this.user) return;\n\n            var id = this.user.uid;\n            var chars = [];\n\n            angular.forEach(this.data, function(value, key) { \n                if(value.userId && value.userId === id)\n                    chars.push(key); \n            });\n            this.chars = chars;\n        }\n\n        createCharacter () {\n\n            var name = prompt(\"Name the character\", \"Joe Bob\");\n            if(!name) {\n                alert(\"Characters must have a name\");\n                return;\n            } else if(this.data[name]) {\n                alert(\"Name is already in use\");\n                return;\n            }\n            \n            var json = getCharacterShell();\n            \n            //associate user id for restricting who can edit\n            json.userId = $scope.user.uid;  \n\n            this.data[name] = json;\n            this.data.$save().then(function() {\n                //navigate to the new char page\n                window.location = '#/' + encodeURIComponent(name);\n\n            }).catch(function(error) {\n                alert(\"Unable to create character because of an error\");\n            });\n\n        }\n\n    }\n\n\n    var app = angular.module(\"dresden.home\").component(\"home\", {\n        templateUrl: 'home/home.component.html',\n        controller: HomeController\n    });\n\n}) (angular);","(function(angular) {\n    \n    \"use strict\";\n\n\n    angular.module(\"dresden.char\", [\"firebase\"]).config(function myAppConfig ( $stateProvider ) {\n        $stateProvider.state({\n            name: 'char',\n            url: '/chars/:id',\n            template: '<character></character>'\n        });\n    })\n\n    .constant('PowerLevels', {\n        \"Feet in the Water\": {\n            skillCap: 4,\n            baseRefresh: 6\n        },\n        \"Waist Deep\": {\n            skillCap: 4,\n            baseRefresh: 8\n        },\n        \"Other\": {\n            skillCap: 5,\n            baseRefresh: 10\n        }\n    });\n\n}) (angular);","(function(angular) {\n    \n    \"use strict\";\n\n\n\n    class CharController {\n\n        constructor (CharacterRef, PowerLevels, Templates, $firebaseAuth, $timeout, $stateParams) {\n            'ngInject';\n\n            this.charId = $stateParams.id;\n            this.store = CharacterRef;\n            this.auth = $firebaseAuth();\n            this.levels = PowerLevels;\n            this.templates = Templates;\n            this.timeout = $timeout;\n        }\n\n        $onInit () {\n            this.displayOpts = {\n                loading: false,\n                message: null,\n                error: null\n            };\n\n            let loadback = () => {\n                this.displayOpts.loading = false;\n                this.refresh();\n            };\n            let errback = (error) => \n                this.displayOpts.error = \"Failed to load character: \" + error.data;\n\n            let callback = (authData) => {\n                this.user = authData;\n\n                if(authData && authData.uid) {\n                    this.displayOpts.loading = true;\n                    this.character = this.store(this.charId);\n                    this.character.$loaded().then(loadback).catch(errback);\n\n                } else if(this.character) {\n                    this.character.$destroy();\n                }\n            };\n\n            this.auth.$onAuthStateChanged(callback);\n        }\n\n        $onDestroy () {\n            this.charId = null;\n            this.store = null;\n            this.auth = null;\n            this.levels = null;\n            this.templates = null;\n            this.timeout = null;\n        }\n\n\n        refresh () {\n            var cost = 0;\n            angular.forEach(this.character.powers, (power) => {\n                cost += power.cost; //NOTE: costs are negative\n            });\n            this.adjustedRefresh = this.character.baseRefresh + cost;\n        }\n\n        onPowerLevelChange () {\n            var level = this.levels[this.character.powerLevel];\n            this.character.skillCap = level.skillCap;\n            this.character.baseRefresh = level.baseRefresh;\n            this.refresh();\n            this.save();\n        }\n\n        save () {\n\n            if(this.debounce) {\n                this.timeout.cancel(this.debounce);\n                this.debounce = null;\n            }\n\n            this.debounce = this.timeout( () => {\n\n                this.debounce = null;\n\n                this.character.$save().then(\n                    () => {\n                        this.displayOpts.showSave = true;\n                        this.timeout(() => {this.displayOpts.showSave = false;}, 1500);\n                    }, \n                    (error) => {\n                        alert(\"There was an error\");\n                    });\n\n            },250);\n\n        }\n\n    }\n\n\n\n    var app = angular.module(\"dresden.char\").component(\"character\", {\n        templateUrl: 'char/char.component.html',\n        controller: CharController\n    });\n\n}) (angular);","(function(angular) {\n    \n    \"use strict\";\n\n\n\n    class ConsequencesController {\n\n        constructor () {\n            \n        }\n\n        $onInit () {\n            this.displayOpts = {};\n        }\n\n        getConsequences () {\n            var result = [];\n            if(this.ngModel) {\n                for(var aspect in this.ngModel) {\n                    result.push(this.ngModel[aspect]);\n                }\n            }\n            return result.sort(function(a,b) {\n                if(a.type === b.type) return a.aspect < b.aspect;\n                else if(a.type === 'mild') return -1;\n                else if(b.type === 'mild') return 1;\n                else if(a.type === 'moderate') return -1;\n                else if(b.type === 'moderate') return 1;\n                else if(a.type === 'severe') return -1;\n                else if(b.type === 'severe') return 1;\n                return 0;\n            });\n        }\n\n        removeConsequence (consq) {\n            if(consq) {\n                this.ngModel[consq.aspect] = null;\n                this.onChange();\n            }\n        }\n\n        showConsequenceEditor () {\n            this.newConsequence = {\n                aspect: \"\",\n                type: \"mild\",\n                modifier: -2\n            };\n            this.displayOpts.showConsequenceEditor = true;\n        }\n\n        addConsequence () {\n            this.ngModel = this.ngModel || {};\n            this.ngModel[this.newConsequence.aspect] = this.newConsequence;\n            this.onChange();\n            this.hideConquenceEditor();\n        }\n        \n        hideConquenceEditor () {\n            this.newConsequence = null;\n            this.displayOpts.showConsequenceEditor = false;\n        }\n\n        updateNewConsequenceModifier () {\n            var type = this.newConsequence.type;\n            var mod = 'mild' === type ? -2 : ( 'moderate' === type ? -4 : ( 'severe' === type ? -6 : -8 ) );\n            this.newConsequence.modifier = mod;\n        }\n\n    }\n\n\n\n    var app = angular.module(\"dresden.char\").component(\"consequences\", {\n        bindings: {\n            ngModel: \"=\",\n            onChange: \"&\"\n        },\n        templateUrl: 'char/consequences.component.html',\n        controller: ConsequencesController\n    });\n\n}) (angular);","(function(angular) {\n    \n    \"use strict\";\n\n\n\n    class PowersController {\n\n        constructor () {\n            \n        }\n\n        $onInit () {\n            this.displayOpts = {};\n        }\n\n        removePower (name) {\n            this.ngModel[name] = null;\n            this.onChange();\n        }\n\n\n        showEditor () {\n            this.newPower = {\n                name: \"\",\n                cost: 0,\n                misc: \"\"\n            };\n            this.displayOpts.showEditor = true;\n        }\n\n        addPower () {\n            this.ngModel = this.ngModel || {};\n            this.ngModel[this.newPower.name] = this.newPower;\n            this.onChange();\n            this.hideEditor();\n        }\n        \n        hideEditor () {\n            this.newPower = null;\n            this.displayOpts.showEditor = false;\n        }\n\n    }\n\n\n\n    angular.module(\"dresden.char\").component(\"powers\", {\n        bindings: {\n            ngModel: \"=\",\n            onChange: \"&\"\n        },\n        templateUrl: 'char/powers.component.html',\n        controller: PowersController\n    });\n\n}) (angular);","(function(angular) {\n    \n    \"use strict\";\n\n\n\n    class SkillsController {\n\n        constructor () {\n            \n        }\n\n        $onInit () {\n            \n        }\n\n\n        getSkillSlots (group) {\n            if(!this.ngModel || !this.ngModel[group])\n                return 0;\n            var skills = this.ngModel[group].choices;\n            if(!skills || !skills.length) return 0;\n            return skills.split(',').length;\n        }\n\n        /**\n         * @return true if not valid!\n         */\n        validateSpent () {\n            if(!this.ngModel) return false;\n            var spent = \n                this.getSkillSlots('average') + this.getSkillSlots('fair') + \n                this.getSkillSlots('good') + this.getSkillSlots('great') + \n                this.getSkillSlots('superb');\n            return spent > this.ngModel.total;\n        }\n\n        /**\n         * @return true if not valid!\n         */\n        validate (group) {\n            if(!this.ngModel) return false;\n            \n            switch(group) {\n                case 'superb': \n                    return this.getSkillSlots('superb') > this.getSkillSlots('great');\n                case 'great': \n                    return this.getSkillSlots('great') > this.getSkillSlots('good');\n                case 'good': \n                    return this.getSkillSlots('good') > this.getSkillSlots('fair');\n                case 'fair': \n                    return this.getSkillSlots('fair') > this.getSkillSlots('average');\n            }\n            return false;   //valid\n        }\n\n    }\n\n\n\n    angular.module(\"dresden.char\").component(\"skills\", {\n        bindings: {\n            ngModel: \"=\",\n            onChange: \"&\"\n        },\n        templateUrl: 'char/skills.component.html',\n        controller: SkillsController\n    });\n\n}) (angular);","(function(angular) {\n    \n    \"use strict\";\n\n\n\n    class StressController {\n\n        constructor () {\n            \n        }\n\n        $onInit () {\n            \n        }\n\n        resetStress () {\n            angular.forEach(['physical','mental','social','hunger'], (type) => {\n                var max = this.ngModel[type].threshold;\n                var used = this.ngModel[type].used;\n                for(var index=0; index<max; ++index) {\n                    used[index] = false;\n                }\n            });\n            this.onChange();\n        }\n\n        toggleStress (type, index) {\n            this.ngModel[type].used[index] = !this.ngModel[type].used[index];\n            this.onChange();\n        }\n\n    }\n\n\n\n    angular.module(\"dresden.char\").component(\"stress\", {\n        bindings: {\n            ngModel: \"=\",\n            onChange: \"&\"\n        },\n        templateUrl: 'char/stress.component.html',\n        controller: StressController\n    });\n\n}) (angular);"]}